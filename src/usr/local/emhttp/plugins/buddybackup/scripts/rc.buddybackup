#!/bin/bash
plugin="buddybackup"

# Current prerequisites: Sanoid and Python has to be installed
# The python requirement can be removed if restrict_zfs.py is rewritten in bash (I have started this, but got stuck since bash regex does not support zero-or-more expresssions "(?:)"" )

# cd /mnt/user/sonic/buddybackup_plugin && ./makepkg.sh && upgradepkg --install-new --reinstall buddybackup.txz

unraid_notify() {
    # Call the Unraid notification script
    /usr/local/emhttp/webGui/scripts/notify -s "BuddyBackup" -d "$1" -i "$2"
}

enable_backups_to_buddy() {
    logger "Enabling BuddyBackup" -t"${plugin}"

    # test SSH connection to buddy
    eval $(test_connection "${host}")
    if [[ "${connection_status}" == "ok" ]]; then
        logger "auth ok, do something" -t"${plugin}"
    else
        logger "failed to connect to buddy: ${connection_result}" -t"${plugin}"
        return
    fi

    if [[ ! -z "${BackupCron}" ]] then
        enable_syncoid_cron
    else
        disable_syncoid_cron
    fi
}

disable_backups_to_buddy() {
    logger "Disabling BuddyBackup" -t"${plugin}"
    disable_syncoid_cron
}

enable_backups_from_buddy() {
    if [[ -z "${ReceiveDestinationDataset}" ]]; then
        err="Can not enable backups from buddy, no recieve destination dataset set."
        logger "${err}" -t"${plugin}"
        echo "${err}"
        return
    fi

    # add buddybackup_receiver to "AllowUsers list" in /etc/ssh/sshd_config if AllowUsers exists (and restart sshd)
    # note: This probably makes it incompatible with other plugins that modify this line, such as "SSH Config Tool" by DocGyver
    sed -i 's/^#\?AllowUsers .*/AllowUsers root/' /etc/ssh/sshd_config
    sed -i 's/^#\?AllowUsers \(.*\)/AllowUsers \1 '${receiving_user}'/' /etc/ssh/sshd_config
    /etc/rc.d/rc.sshd restart >/dev/null 2>&1

    # make buddybackup_receiver user (with a homedir)
    useradd -m -s /bin/bash "${receiving_user}" >/dev/null 2>&1
    # copy public key to homedir/.ssh/authorized_keys. prepend with: 'restrict,command="path/to/restrict_zfs" '
    mkdir "/home/${receiving_user}/.ssh" >/dev/null 2>&1
    chmod 700 "/home/${receiving_user}/.ssh"
    touch "/home/${receiving_user}/.ssh/authorized_keys" >/dev/null 2>&1
    chmod 644 "/home/${receiving_user}/.ssh/authorized_keys"
    chown -R ${receiving_user}:${receiving_user} "/home/${receiving_user}/"
    echo "restrict,command=\"/usr/local/emhttp/plugins/buddybackup/scripts/restrict_zfs.py\" ${DestinationPubSSHKey}" > "/home/${receiving_user}/.ssh/authorized_keys"

    zfs allow -u "${receiving_user}" create,mount,receive "${ReceiveDestinationDataset}"

    # save retention to sanoid conf
    sanoid_conf=$(printf "[${ReceiveDestinationDataset}]\n\
    hourly = ${ReceiveDestinationRententionHourly}\n\
    daily = ${ReceiveDestinationRententionDaily}\n\
    weekly = ${ReceiveDestinationRententionWeekly}\n\
    monthly = ${ReceiveDestinationRententionMonthly}\n\
    yearly = ${ReceiveDestinationRententionYearly}\n\
    autosnap = no\n\
    autoprune = yes\n\
    recursive = yes\n")
    echo "${sanoid_conf}" > "${sanoid_config_path}"

    enable_sanoid_cron
}

disable_backups_from_buddy() {
    # remove buddybackup_receiver from "AllowUsers list" in /etc/ssh/sshd_config (and restart sshd)
    sed -i 's/ '${receiving_user}'//' /etc/ssh/sshd_config
    /etc/rc.d/rc.sshd restart >/dev/null 2>&1

    rm -r "/home/${receiving_user}" >/dev/null 2>&1

    # todo: if $ReceiveDestinationDataset has changed since enable_backups_from_buddy() we don't know which dataset to zfs unallow. Fix that
    if [[ "${ReceiveDestinationDataset}" ]]; then
        zfs unallow -u "${receiving_user}" create,mount,receive "${ReceiveDestinationDataset}" >/dev/null 2>&1
    fi

    userdel "${receiving_user}" >/dev/null 2>&1

    disable_sanoid_cron
}

enable_syncoid_cron() {
    logger "Enabling syncoid cron" -t"${plugin}"

    rm "${syncoid_cron_file}" >/dev/null 2>&1
    echo "# Generated cron settings for plugin buddybackup" > "${syncoid_cron_file}"
    echo "${BackupCron} { ${timestamp_cmd}; flock -n /var/lock/buddybackup-syncoid -c \"/usr/local/emhttp/plugins/buddybackup/scripts/rc.buddybackup send_backup\"; } >> /var/log/buddybackup.log 2>&1" >> "${syncoid_cron_file}"
    echo -e "\n" >> "${syncoid_cron_file}"
    /usr/local/sbin/update_cron
}

disable_syncoid_cron() {
    logger "Disabling syncoid cron" -t"${plugin}"

    rm "${syncoid_cron_file}" >/dev/null 2>&1
    /usr/local/sbin/update_cron
}

update() {
    if [[ "${BackupToBuddy}" == "enable" ]] then
        enable_backups_to_buddy
    else
        disable_backups_to_buddy
    fi

    if [[ "${ReceiveBackups}" == "enable" ]] then
        enable_backups_from_buddy
    else
        disable_backups_from_buddy
    fi
}

send_backup() {
    logger "Sending backup to buddy" -t"${plugin}"

    syncoid_flags="--no-privilege-elevation --no-sync-snap --sendoptions=w"
    if [[ "${BackupRecursive}" == "yes" ]] then
        syncoid_flags+=" --recursive"
    fi
    if result=$(syncoid ${syncoid_flags} --sshkey "${ssh_key_path}" "${SourceDataset}" "${receiving_user}@${DestinationHost}:${SendDestinationDataset}" 2>&1); then
        printf -v result "${result}\n\nSuccessfully synced backup to buddy!"
    else 
        printf -v result "Sending backup failed. Error code $?. Full output:\n\n${result}"
        if [[ ! "${1}" == "echo" ]]; then
            unraid_notify "${result}" "alert"
        fi
    fi
    echo "${result}" # always echo to put result in the log file
}

enable_sanoid_cron() {
    rm "${sanoid_cron_file}" >/dev/null 2>&1
    echo "# Generated cron settings for plugin buddybackup" > "${sanoid_cron_file}"
    echo "*/15 * * * * { ${timestamp_cmd}; flock -n /var/lock/buddybackup-sanoid-cron-take -c \"TZ=UTC /usr/local/sbin/sanoid --configdir=\"${plugin_path}\" --take-snapshots\"; } >> /var/log/buddybackup.log 2>&1" >> "${sanoid_cron_file}"
    echo "*/15 * * * * { ${timestamp_cmd}; flock -n /var/lock/buddybackup-sanoid-cron-prune -c \"/usr/local/sbin/sanoid --configdir=\"${plugin_path}\" --prune-snapshots\"; } >> /var/log/buddybackup.log 2>&1" >> "${sanoid_cron_file}"
    echo -e "\n" >> "${sanoid_cron_file}"
    /usr/local/sbin/update_cron
}

disable_sanoid_cron() {
    rm "${sanoid_cron_file}" >/dev/null 2>&1
    /usr/local/sbin/update_cron
}

test_connection() {
    host=$1
    if [[ -z "${host}" ]] then
        host="${DestinationHost}"
    fi
    # test SSH connection to buddy
    ssh_status=$(ssh -i "${ssh_key_path}" -o BatchMode=yes -o ConnectTimeout=5 "${receiving_user}@${host}" echo ok 2>&1)
    if [[ "${ssh_status}" == ok ]] || [[ "${ssh_status}" == *"hostfile_replace_entries"* ]]; then
        echo "connection_status=\"ok\"; connection_result=\"${ssh_status}\""
    elif [[ "${ssh_status}" == *"Permission denied"* ]] ; then
        echo "connection_status=\"no auth\"; connection_result=\"${ssh_status}\""
    else
        echo "connection_status=\"fail\"; connection_result=\"${ssh_status}\""
    fi
}

test_connection_cmd() {
    host=$1
    if [[ -z "${host}" ]] then
        host="${DestinationHost}"
    fi
    echo "<h2>Trying to connect to ${host} over SSH..<br>"

    eval $(test_connection "${host}")
    case "${connection_status}" in
        ("ok") echo "Success!<br>" ;;
        ("no auth") echo "Authentication failed. Make sure buddy has enabled \"Buddy's Backups\" and entered your public key.<br>" ;;
        ("fail") echo "Failed: ${connection_result}<br>" ;;
        (*) echo "unexpected error" ;;
    esac

    echo "</h2>"
}

get_buddy_snapshots() {
    cmd="zfs list -o name,origin -t filesystem,volume -Hr '${SendDestinationDataset}'"
    ssh_result=$(ssh -i "${ssh_key_path}" -o BatchMode=yes -o ConnectTimeout=5 "${receiving_user}@${DestinationHost}" "${cmd}" 2>&1)
    if [ $? -ne 0 ]; then
        ssh_result=$(echo "${ssh_result}" | sed 's/\r//g') # Remove ^M characters
        printf '{"status": "failed", error: "%s"}' "${ssh_result}"
        return
    fi
    # ssh_result should now contain one line per dataset/child dataset

    cmds=()
    datasets=()
    while IFS= read -r line; do
        dataset=$(echo "${line}" | sed 's/\s.*$//')
        cmds+=( "zfs get -Hpd 1 -t snapshot guid,creation '${dataset}'" )
        datasets+=( "${dataset}" )
    done <<< "${ssh_result}"
    
    json="{\"status\": \"ok\", \"data\": {"
    for ((i = 0; i < ${#cmds[@]}; i++))
    do
        json+="\"${datasets[$i]}\":{"
        ssh_sub_result=$(ssh -i "${ssh_key_path}" -o BatchMode=yes -o ConnectTimeout=5 "${receiving_user}@${DestinationHost}" "${cmds[$i]}" 2>&1)
        if [ $? -ne 0 ]; then
            ssh_sub_result=$(echo "${ssh_sub_result}" | sed 's/\r//g') # Remove ^M characters
            printf '{"status": "failed", error: "%s"}' "${ssh_sub_result}"
            return
        fi

        while IFS= read -r line; do
            # Parse out snap, guid, creation from every 2 lines
            # examples lines:
            # disk4/offsite_backup/appdata@syncoid_2025-01-21:03:00:03-GMT01:00        guid    13997382453328167196    -
            # disk4/offsite_backup/appdata@syncoid_2025-01-21:03:00:03-GMT01:00        creation        1737424803      -

            snap=$(echo \"${line}\" | tr -s ' ' | cut -d '@' -f 2 | cut -d ' ' -f 1)
            guid=$(echo \"${line}\" | tr -s ' ' | cut -d ' ' -f 3)
            IFS= read -r line
            creation=$(echo \"${line}\" | tr -s ' ' | cut -d ' ' -f 3)

            json+="\"${snap}\":{\"guid\":\"${guid}\",\"creation\":\"${creation}\"}," 
        done <<< "${ssh_sub_result}"
        json="${json::-1}" # Remove trailing comma

        json+="},"
    done
    json="${json::-1}" # Remove trailing comma
    json+="}}"
    echo "${json}"
}

uninstall() {
    disable_backups_to_buddy
    disable_backups_from_buddy
    disable_sanoid_cron
    disable_syncoid_cron
}

# read our configuration.
CONFIG="/boot/config/plugins/${plugin}/${plugin}.cfg"
source $CONFIG
timestamp_cmd="printf \"\\n%s: \\n\" \"\$(date \"+%F %T\")\""

receiving_user="buddybackup_receiver"
plugin_path="/boot/config/plugins/${plugin}"
ssh_key_path="${plugin_path}/buddybackup_sender_key"
sanoid_cron_file="${plugin_path}/sanoid.cron"
syncoid_cron_file="${plugin_path}/syncoid.cron"
sanoid_config_path="${plugin_path}/sanoid.conf"

case "$1" in
	('update')
		update
	;;
    ('send_backup')
		send_backup "$2"
	;;
    ('enable_sanoid_cron')
		enable_sanoid_cron
	;;
    ('disable_sanoid_cron')
		disable_sanoid_cron
	;;
    ('test_connection')
		test_connection_cmd "$2"
	;;
    ('get_buddy_snapshots')
        get_buddy_snapshots
    ;;
    ('uninstall')
		uninstall
	;;
	(*)
		echo "usage $0 update|send_backup|enable_sanoid_cron|disable_sanoid_cron|test_connection|uninstall"
esac