#!/bin/bash
set -o pipefail

plugin="buddybackup"

list_descendants() {
  local children=$(ps -o pid= --ppid "$1")
  for pid in $children; do
    list_descendants "$pid"
  done
  echo "$children"
}
cleanup() {
    # Kill child processes
    kill $(list_descendants $$) >/dev/null 2>&1
}
trap cleanup EXIT

unraid_notify() {
    # Call the Unraid notification script
    /usr/local/emhttp/webGui/scripts/notify -s "BuddyBackup" -d "$1" -i "$2"
}

# Default output is console, use optional parameter "nchan" to write to that nchan channel as well
write() {
    local nchan="$1"
    shift  # Shift arguments to access messages

    if [[ -n "$nchan" ]]; then
        local url="http://localhost/pub/buddybackup-${nchan}?buffer_length=10"
        local socket="/var/run/nginx.socket"

        for message in "$@"; do
            curl -o /dev/null --unix-socket "${socket}" -X POST -d "${message}" "${url}" >/dev/null 2>&1
        done
    fi
    
    for message in "$@"; do
        echo "${message}"
    done
}

# Runs cmd and continously sends output to nchan if specified, otherwise runs cmd and echos result afterwards
run_and_write_output() {
    local nchan="$1"  # Set to empty string to only write to console. Otherwise it will be sent to the nchan channel with this name
    local cmd="$2"

    if [[ -n "$nchan" ]]; then
        local url="http://localhost/pub/buddybackup-${nchan}?buffer_length=10"
        local socket="/var/run/nginx.socket"

        cmd+=" | tee >( stdbuf -oL tr '\r' '\n' | xargs -I % curl -o /dev/null --unix-socket \"${socket}\" -X POST --data-binary \"%\" \"${url}\" >/dev/null 2>&1)"
    fi

    result=$(eval "${cmd}")
    local error_code=$?
    echo "${result}"
    return "${error_code}"
}

enable_backups_from_buddy() {
    if [[ -z "${ReceiveDestinationDataset}" ]]; then
        local err="Can not enable backups from buddy, no recieve destination dataset set."
        logger "${err}" -t"${plugin}"
        echo "${err}"
        return
    fi

    # add buddybackup to "AllowUsers list" in sshd_config if AllowUsers exists (and restart sshd)
    # note: This probably makes it incompatible with other plugins that modify this line, such as "SSH Config Tool" by DocGyver
    local grepped=$(grep "AllowUsers.*${username}" "${sshd_config}")
    local trimmed=$(echo "${grepped}" | sed 's/^[ \t]*//')
    local restart_sshd=false
    if [[ ! $grepped ]] || [[ $trimmed == "#"* ]]; then
        sed -i 's/^#\?AllowUsers .*/AllowUsers root/' "${sshd_config}"
        sed -i 's/^#\?AllowUsers \(.*\)/AllowUsers \1 '${username}'/' "${sshd_config}"
        restart_sshd=true
    fi

    # Add own section to sshd_config for buddybackup to try avoid having unraid updates break buddybackup auth
    if ! grep -q "^Match User ${username}" "${sshd_config}"; then
        cat <<EOF >> "${sshd_config}"
Match User ${username}
    PasswordAuthentication no
    ChallengeResponseAuthentication no
    PubkeyAuthentication yes
    AuthorizedKeysFile    .ssh/authorized_keys
EOF
        restart_sshd=true
    fi

    if [ "$restart_sshd" = true ]; then
        /etc/rc.d/rc.sshd restart >/dev/null 2>&1
    fi

    # Ensure user is setup correctly by re-creating it
    userdel "${username}" >/dev/null 2>&1
    # make buddybackup user, with a homedir and random password
    # a password is required, even though it's never used, for ssh access to function with PAM disabled
    local pwd=$(openssl rand -base64 32)
    useradd -m -s /bin/bash -p "${pwd}" "${username}" >/dev/null 2>&1
    
    # copy public key to homedir/.ssh/authorized_keys. prepend with: 'restrict,command="path/to/restrict_zfs" '
    mkdir "/home/${username}/.ssh" >/dev/null 2>&1
    chmod 700 "/home/${username}/.ssh"
    touch "/home/${username}/.ssh/authorized_keys" >/dev/null 2>&1
    chmod 644 "/home/${username}/.ssh/authorized_keys"
    chown -R ${username}:${username} "/home/${username}/"

    # Copy each buddy key to authorized_keys file. If multiple keys are provided, each key will be on a new line.
    > "/home/${username}/.ssh/authorized_keys" # Clear the file before writing new keys
    while IFS= read -r key; do
        # Trim whitespace and check if the line is non-empty
        trimmed_key=$(echo "$key" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
        if [[ -n "$trimmed_key" ]]; then
            echo "restrict,command=\"${empath}/deps/restrict_zfs\" ${trimmed_key}" >> "/home/${username}/.ssh/authorized_keys"
        fi
    done <<< "${DestinationPubSSHKey}"

    # note: this spins up disk
    zfs allow -u "${username}" create,mount,receive,send "${ReceiveDestinationDataset}"
}

disable_backups_from_buddy() {
    local restart_sshd=false
    # Remove "Match User buddybackup" section from sshd_config
    if grep -q "^Match User ${username}" "${sshd_config}"; then
        awk -v user="${username}" '
        BEGIN { skip=0 }
        $0 ~ "^Match User "user"$" { skip=1; next }
        skip {
            if ($0 !~ /^(\t|    )/) { skip=0 } else { next }
        }
        { print }
        ' "${sshd_config}" | tee "${sshd_config}.tmp" > /dev/null && mv "${sshd_config}.tmp" "${sshd_config}"
        restart_sshd=true
    fi

    # remove buddybackup from "AllowUsers list" in sshd_config
    if grep -q "AllowUsers.*${username}" "${sshd_config}"; then
        sed -i '/^[[:space:]#]*AllowUsers/ s/ '${username}'\b//' "${sshd_config}"
        restart_sshd=true
    fi

    if [ "$restart_sshd" = true ]; then
        /etc/rc.d/rc.sshd restart >/dev/null 2>&1
    fi

    rm -r "/home/${username}" >/dev/null 2>&1

    # note: this spins up disk
    for dataset in $(zfs list -H -o name); do 
        if zfs allow "${dataset}" | grep -q "${username}"; then
            zfs unallow -u "${username}" "${dataset}" >/dev/null 2>&1
        fi
    done

    userdel "${username}" >/dev/null 2>&1
}

remove_cron_files() {
    logger "Removing cron files" -t"${plugin}"

    rm "${plugin_path}/*.cron" >/dev/null 2>&1
    /usr/local/sbin/update_cron
}

update() {
    # generate new ssh keys to access buddy if the keys don't already exist
    if [ ! -f "${ssh_key_path}" ] || [ ! -f "${ssh_key_path}.pub" ]; then
        echo "Generating new key pair.."
        rm "${ssh_key_path}" >/dev/null 2>&1
        rm "${ssh_key_path}.pub" >/dev/null 2>&1
        ssh-keygen -q -t ed25519 -f "${ssh_key_path}" -N ''
    fi
}

clear_known_hosts() {
    # remove old entries to known_host
    stripped=$(sed -n '1,/# buddybackup start/p;/# buddybackup end/,$p' ~/.ssh/known_hosts | sed -n '/^# buddybackup /d;p')
    echo "${stripped}" > ~/.ssh/known_hosts
}

dataset_exists() {
    local dataset="$1"
    [[ $(zfs get -Ho value type "${dataset}" 2>&1) != *"dataset does not exist" ]]
}
is_encrypted() {
    local dataset="$1"
    [[ $(zfs get -Ho value encryption "${dataset}" 2>&1) != "off" ]]
}

send_mark_received_backup() {
    local destination_host="${1}"
    
    local cmd="/usr/local/emhttp/plugins/buddybackup/scripts/rc.buddybackup.php mark_received_backup"
    local ssh_result=$(ssh -i "${ssh_key_path}" -o BatchMode=yes -o ConnectTimeout=5 "${username}@${destination_host}" "${cmd}" 2>&1)
    local error_code=$?
    if [[ $error_code -ne 0 ]]; then
        write "" "Failed to send mark_received_backup to buddy"
    fi
}

mark_sent_backup() {
    # Store info to tmp file read by plugin dashboard panel
    local dest_size="";
    local type="${1}"
    local destination_host="${2}"
    local destination_dataset="${3}"
    local uid="${4}"
    if [[ "${type}" == "local" ]]; then
        dest_size=$(zfs get -H -o value used "${destination_dataset}");
    else
        local result=$(get_buddy_used_size "${destination_host}" "${destination_dataset}");
        if [[ $? -eq 0 ]]; then
            dest_size="${result}";
        else
            write "" "Failed to get used size from buddy: ${result}"
        fi
    fi

    printf "last_ran=$(date +%s)\ndest_size=${dest_size}" > "/tmp/buddybackup-${uid}";
}

send_backup() {
    logger "Sending backup to buddy" -t"${plugin}"

    local source_dataset="${1}"
    local recursive="${2}"
    local destination_host="${3}"
    local destination_dataset="${4}"
    local uid="${5}"

    local encrypted_dataset=0
    if is_encrypted "${source_dataset}"; then
        encrypted_dataset=1
    fi

    local nchan="send"
    error=""
    if [[ "${AllowUnencryptedRemoteBackups}" != "yes" ]] && [[ $encrypted_dataset -eq 0 ]]; then
        error="Source dataset '${source_dataset}' is not encrypted!"
    fi
    if ! dataset_exists "${source_dataset}"; then
        error="Source dataset '${source_dataset}' does not exist!"
    fi

    if [ -n "${error}" ]; then
        error="Aborting backup. ${error}"
        write "${nchan}" "${error}"
        unraid_notify "${error}" "alert"
        return
    fi

    local my_syncoid_flags="${syncoid_flags}"
    if [[ "${AllowUnencryptedRemoteBackups}" == "yes" ]] && [[ $encrypted_dataset -eq 0 ]]; then
        write "${nchan}" "Warning: sending unencrypted dataset to remote destination!"
        my_syncoid_flags="${syncoid_flags_unencrypted}"
    fi
    if [[ "${recursive}" == "yes" ]]; then
        my_syncoid_flags+=" --recursive"
    fi
    local error_code=0
    if result=$(run_and_write_output "${nchan}" "${syncoid_bin} ${my_syncoid_flags} --sshkey \"${ssh_key_path}\" \"${source_dataset}\" \"${username}@${destination_host}:${destination_dataset}\" 2>&1"); then
        printf -v result "\n%s" "Successfully synced backup to buddy!"
        mark_sent_backup "remote" "${destination_host}" "${destination_dataset}" "${uid}"
        send_mark_received_backup "${destination_host}"
    else 
        error_code=$?
        printf -v result "%s" "Sending backup failed. Error code ${error_code}. Full output: ${result}"
        unraid_notify "${result}" "alert"
    fi
    write "${nchan}" "${result}"

    if [[ "${nchan}" ]]; then
        write "${nchan}" "[[rc.buddybackup finished]]"
    fi
    exit $error_code
}

send_local_backup() {
    logger "Running local backup" -t"${plugin}"

    local source_dataset="${1}"
    local recursive="${2}"
    local destination_dataset="${3}"
    local uid="${4}"

    local nchan="send"
    error=""
    if ! dataset_exists "${source_dataset}"; then
        error="Source dataset '${source_dataset}' does not exist!"
    fi

    if [ -n "${error}" ]; then
        error="Aborting backup. ${error}"
        write "${nchan}" "${error}"
        unraid_notify "${error}" "alert"
        return
    fi

    local my_syncoid_flags="${syncoid_flags_local}"
    if [[ "${recursive}" == "yes" ]] then
        my_syncoid_flags+=" --recursive"
    fi
    local error_code=0
    if result=$(run_and_write_output "${nchan}" "${syncoid_bin} ${my_syncoid_flags} \"${source_dataset}\" \"${destination_dataset}\" 2>&1"); then
        printf -v result "\n%s" "Successfully synced local backup!"
        mark_sent_backup "local" "" "${destination_dataset}" "${uid}"
    else 
        error_code=$?
        printf -v result "%s" "Local backup failed. Error code ${error_code}. Full output: ${result}"
        unraid_notify "${result}" "alert"
    fi
    write "${nchan}" "${result}"

    if [[ "${nchan}" ]]; then
        write "${nchan}" "[[rc.buddybackup finished]]"
    fi
    exit $error_code
}

restore_snapshot() {
    local type="${1}"
    local destination_host=""
    if [[ "${type}" == "remote" ]]; then
        destination_host="${2}"
        shift
    fi
    local mode="${2}"
    local snapshot="${3}"
    local source_dataset="${4}"
    local destination_dataset="${5}"

    # If last param is "nchan" we send output to nchan channel "restore" instead of echo
    local nchan="${6}"
    if [[ "${nchan}" == "nchan" ]]; then
        nchan="restore"
    else
        nchan=""
    fi

    logger "Restoring ${type} backup" -t"${plugin}"

    local error_code=-1
    local result=""
    case "$mode" in
        ('selected')
            local cmd=""
            if [[ "${type}" == "remote" ]]; then
                cmd="${syncoid_bin} ${syncoid_flags} --include-snaps=\"${snapshot}\" --sshkey \"${ssh_key_path}\" \"${username}@${destination_host}:${source_dataset}\" \"${destination_dataset}\" 2>&1"
            elif [[ "${type}" == "local" ]]; then
                cmd="${syncoid_bin} ${syncoid_flags_local} --include-snaps=\"${snapshot}\" \"${source_dataset}\" \"${destination_dataset}\" 2>&1"
            fi
            result=$(run_and_write_output "${nchan}" "${cmd}");
            error_code=$?
        ;;
        ('selected_and_newer')
            # todo: this requires something like
            # syncoid --include-snaps="(?:wanted_snapshot|newer_snap1|newer_snap2|...|common_parent_snapshot)
            # but common_parent_snapshot has to be found which is the hard part
            write "${nchan}" "Restore mode '${mode}' is not implemented yet"
            return
        ;;
        ('all')
            local cmd=""
            if [[ "${type}" == "remote" ]]; then
                cmd="${syncoid_bin} ${syncoid_flags} --sshkey \"${ssh_key_path}\" \"${username}@${destination_host}:${source_dataset}\" \"${destination_dataset}\" 2>&1"
            elif [[ "${type}" == "local" ]]; then
                cmd="${syncoid_bin} ${syncoid_flags_local} \"${source_dataset}\" \"${destination_dataset}\" 2>&1"
            fi
            result=$(run_and_write_output "${nchan}" "${cmd}");
            error_code=$?
        ;;
        (*)
            write "${nchan}" "Invalid restore mode specified: (${mode})"
            return
    esac

    if [ $error_code -eq 0 ]; then
        if [[ -n "${nchan}" ]]; then
            printf -v result "\n%s" "Successfully restored ${type} backup!"
            unraid_notify "Restoring ${type} backup finished successfully!" "normal"
        else
            printf -v result "%s\n\n%s" "${result}" "Successfully restored ${type} backup!"
        fi
    else 
        full_error=""
        printf -v full_error "%s" "Restoring ${type} backup failed. Error code ${error_code}. Full output: ${result}"
        if [[ -n "${nchan}" ]]; then
            unraid_notify "${full_error}" "alert"
            printf -v result "%s" "Restoring ${type} backup failed. Error code ${error_code}."
        else
            result="${full_error}"
        fi
    fi
    write "${nchan}" "${result}"

    if [[ "${nchan}" ]]; then
        write "${nchan}" "[[rc.buddybackup finished]]"
    fi
}

test_connection() {
    local host=$1
    local cmd="${2:-echo ok}"
    # test SSH connection to buddy
    ssh_status=$(ssh -i "${ssh_key_path}" -o BatchMode=yes -o ConnectTimeout=5 "${username}@${host}" $cmd 2>&1)
    if [[ "${ssh_status}" == ok ]] || [[ "${ssh_status}" == *"hostfile_replace_entries"* ]]; then
        echo "connection_status=\"ok\"; connection_result=\"${ssh_status}\""
    elif [[ "${ssh_status}" == *"Permission denied"* ]] ; then
        echo "connection_status=\"no auth\"; connection_result=\"${ssh_status}\""
    else
        echo "connection_status=\"fail\"; connection_result=\"${ssh_status}\""
    fi
}

test_connection_cmd() {
    local host=$1
    echo "<h2>Trying to connect to ${host} over SSH..<br>"

    local success=0
    eval $(test_connection "${host}")
    case "${connection_status}" in
        ("ok")
            echo "Success!<br>"
            success=1
        ;;
        ("no auth") echo "Authentication failed. Make sure buddy has enabled \"Buddy's Backups\" and entered your public key.<br>" ;;
        ("fail") echo "Failed: ${connection_result}<br>" ;;
        (*) echo "unexpected error" ;;
    esac

    if [[ $success -eq 1 ]]; then
        eval $(test_connection "${host}" "echo ok && ls")
        if [[ "${connection_status}" != "fail" ]] || [[ ${connection_result} != "" ]]; then
            echo "<span style='color:red'>BuddyBackup SSH security validation failed! This could happen if remote is not using BuddyBackup. Backups will still work, but connection is not restriced to backups. This is a security risk.<span>"
        fi
    fi

    echo "</h2>"
}

get_available_snapshots() {
    local type="${1}"
    local destination_host=""
    if [[ "${type}" == "remote" ]]; then
        destination_host="${2}"
        shift
    fi
    local destination_dataset="${2}"

    local cmd="zfs list -o name,origin -t filesystem,volume -Hr '${destination_dataset}'"

    local result=""
    if [[ "${type}" == "remote" ]]; then
        result=$(ssh -i "${ssh_key_path}" -o BatchMode=yes -o ConnectTimeout=5 "${username}@${destination_host}" "${cmd}" 2>&1)
        ## Enable for debugging
        # echo "full cmd: ssh -i \"${ssh_key_path}\" -o BatchMode=yes -o ConnectTimeout=5 \"${username}@${destination_host}\" \"${cmd}\" 2>&1"
        # echo "result: ${result}"
    elif [[ "${type}" == "local" ]]; then
        result=$(eval "${cmd}")
    fi
    if [ $? -ne 0 ]; then
        result=$(echo "${result}" | jq -Rrsa . | sed -e 's/^"//' -e 's/"$//')
        printf '{"status": "failed", "error": "%s"}' "${result}"
        return
    fi

    # result should now contain one line per dataset/child dataset

    cmds=()
    datasets=()
    while IFS= read -r line; do
        # Basic error checking, ensure line begins with dataset name
        if [[ "${line}" != "${destination_dataset}"* ]]; then
            result=$(echo "${result}" | jq -Rrsa . | sed -e 's/^"//' -e 's/"$//')
            printf '{"status": "failed", "error": "%s"}' "Buddy returned invalid line: ${result}"
            return
        fi

        dataset=$(echo "${line}" | sed 's/\s.*$//')
        cmds+=( "zfs get -Hpd 1 -t snapshot guid,creation '${dataset}'" )
        datasets+=( "${dataset}" )
    done <<< "${result}"
    
    json="{\"status\": \"ok\", \"data\": {"
    for ((i = 0; i < ${#cmds[@]}; i++))
    do
        json+="\"${datasets[$i]}\":{"
        local sub_result=""
        if [[ "${type}" == "remote" ]]; then
            sub_result=$(ssh -i "${ssh_key_path}" -o BatchMode=yes -o ConnectTimeout=5 "${username}@${destination_host}" "${cmds[$i]}" 2>&1)
        elif [[ "${type}" == "local" ]]; then
            sub_result=$(eval "${cmds[$i]}" 2>&1)
        fi
        if [ $? -ne 0 ]; then
            sub_result=$(echo "${sub_result}" | jq -Rrsa . | sed -e 's/^"//' -e 's/"$//')
            printf '{"status": "failed", "error": "%s"}' "${sub_result}"
            return
        fi

        while IFS= read -r line; do
            if [[ -z "${line}" ]]; then
                # skip empty lines / datasets with no snapshots
                json+="," 
                continue
            fi
            # Parse out snap, guid, creation from every 2 lines
            # examples lines:
            # disk4/offsite_backup/appdata@syncoid_2025-01-21:03:00:03-GMT01:00        guid    13997382453328167196    -
            # disk4/offsite_backup/appdata@syncoid_2025-01-21:03:00:03-GMT01:00        creation        1737424803      -

            snap=$(echo \"${line}\" | tr -s ' ' | cut -d '@' -f 2 | cut -d ' ' -f 1)
            guid=$(echo \"${line}\" | tr -s ' ' | cut -d ' ' -f 3)
            IFS= read -r line
            creation=$(echo \"${line}\" | tr -s ' ' | cut -d ' ' -f 3)

            json+="\"${snap}\":{\"guid\":\"${guid}\",\"creation\":\"${creation}\"}," 
        done <<< "${sub_result}"
        json="${json::-1}" # Remove trailing comma

        json+="},"
    done
    json="${json::-1}" # Remove trailing comma
    json+="}}"
    echo "${json}"
}

get_buddy_used_size() {
    local destination_host="${1}"
    local destination_dataset="${2}"

    local cmd="zfs get -H -o value used '${destination_dataset}'"
    local ssh_result=$(ssh -i "${ssh_key_path}" -o BatchMode=yes -o ConnectTimeout=5 "${username}@${destination_host}" "${cmd}" 2>&1)
    local error_code=$?
    if [[ $error_code -eq 0 ]] && [[ -z "${ssh_result}" ]]; then
        ssh_result="empty response"
        error_code=1
    fi
    echo "${ssh_result}";
    exit $error_code
}

uninstall() {
    disable_backups_from_buddy
    remove_cron_files
    clear_known_hosts
}

# read our configuration.
CONFIG="/boot/config/plugins/${plugin}/${plugin}.cfg"
source $CONFIG

# Unraid 7.1 copies ssh configs from boot, so edit the boot file if on that version and it exists
source /etc/unraid-version
unraid_7_1_or_higher=false
if [[ "$(echo "$version" | awk -F. '{print $2}')" -ge 1 ]]; then
    unraid_7_1_or_higher=true
fi
if [[ -f "/boot/config/ssh/sshd_config" ]] && [ "$unraid_7_1_or_higher" = true ]; then
    sshd_config="/boot/config/ssh/sshd_config"
else
    sshd_config="/etc/ssh/sshd_config"
fi

username="buddybackup"
plugin_path="/boot/config/plugins/${plugin}"
ssh_key_path="${plugin_path}/buddybackup_sender_key"
empath="/usr/local/emhttp/plugins/buddybackup"
sanoid_bin="${empath}/deps/sanoid"
syncoid_bin="${empath}/deps/syncoid"
syncoid_flags="--no-privilege-elevation --no-sync-snap --sendoptions=w --pv-options='-pterbf' --compress=zstdmt-fast"
syncoid_flags_unencrypted="--no-privilege-elevation --no-sync-snap --pv-options='-pterbf' --compress=zstdmt-fast" # flags when sending unencrypted backup to remote destination
syncoid_flags_local="--no-sync-snap --pv-options='-pterbf' --compress=none" # flags when backup destination is on local machine

case "$1" in
	('update')
		update
	;;
    ('send_backup')
		send_backup "${2}" "${3}" "${4}" "${5}" "${6}"
	;;
    ('send_local_backup')
		send_local_backup "${2}" "${3}" "${4}" "${5}"
	;;
    ('test_connection')
		test_connection_cmd "${2}"
	;;
    ('get_available_snapshots')
        get_available_snapshots "${2}" "${3}" "${4}"
    ;;
    ('get_buddy_used_size')
        get_buddy_used_size "${2}" "${3}"
    ;;
    ('restore_snapshot')
        restore_snapshot "${2}" "${3}" "${4}" "${5}" "${6}" "${7}" "${8}"
    ;;
    ('enable_backups_from_buddy')
        enable_backups_from_buddy
    ;;
    ('disable_backups_from_buddy')
        disable_backups_from_buddy
    ;;
    ('clear_known_hosts')
        clear_known_hosts
    ;;
    ('uninstall')
		uninstall
	;;
	(*)
		echo "usage $0 update|send_backup|send_local_backup|test_connection|get_available_snapshots|get_buddy_used_size|restore_snapshot|enable_backups_from_buddy|disable_backups_from_buddy|clear_known_hosts|uninstall"
esac