Menu="BuddyBackup:1"
Title="Backup to Buddy"
---
<?php
    $public_ssh_key_path = "/boot/config/plugins/$plugin/buddybackup_sender_key.pub";
    if (file_exists($public_ssh_key_path)) {
      $public_ssh_key	= file_get_contents($public_ssh_key_path);
    } else {
      $public_ssh_key	= "";
    }

    $disabled = ($disable_send) ? "disabled" : "";
?>
<script>
  $(function() { 
    $('form').find('select,input[type=text],input[type=number],input[type=password],input[type=checkbox],input[type=radio],input[type=file],textarea').not('.lock').each(function(){$(this).on('input change',function() {
      var form = $(this).parentsUntil('form').parent();
      form.find('input.disable-on-unsaved').not('.lock').prop('disabled',true).addClass("lock").val(function() {
          return this.value + ' (apply changes to do this)';
      });
    })})
  })

  function test_connection(button) {
    ip = $(document.backup_to_buddy_form).find('input[name="DestinationHost"]').val();
    buddybackup_show_popup('<?=$rc_name?> test_connection "'+ip+'"', '_(Connection test)_', "Testing connection to buddy at "+ip+"..")
  }
  function send_backup(button) {
    var cmd = '<?=$rc_name?> send_backup echo';
    $.post('/webGui/include/StartCommand.php',{cmd:cmd,start:2});
    show_in_progress_log('Backup in progress', '#buddybackup-backup-log', 'active-textarea');
    $(".buddybackup-backup-output-log").append("\nRunning backup..\n");
  }
</script>
<form markdown="1" name="backup_to_buddy_form" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#file" value="<?=$plugin?>/<?=$plugin?>.cfg" <?=$disabled?>>
<input type="hidden" name="#command" value="<?=$rc_script?>" <?=$disabled?>>
<input type="hidden" name="#arg[1]" value="update" <?=$disabled?>>
_(Enable)_:
: <select name="BackupToBuddy" class="align" <?=$disabled?>>
    <?=mk_option($cfg['BackupToBuddy'], "disable", "_(No)_");?>
    <?=mk_option($cfg['BackupToBuddy'], "enable", "_(Yes)_");?>
  </select>

:enable_backup_send_plug:
    > Enable automatically scheduled ZFS snapshot syncs (using syncoid) to your buddy. Your buddy's retention settings decide when your backed-up snapshots will be deleted.
:end

_(Buddy's hostname or IP adress)_:
: <input type="text" name="DestinationHost" class="align" value="<?=$cfg['DestinationHost'];?>" <?=$disabled?>>
<input type="button" value="_(Test connection)_" onclick="test_connection(this)" <?=$disabled?>>

_(Your SSH public key (send this to you buddy))_:
: <input disabled type="text" class="align" value="<?=$public_ssh_key;?>" <?=$disabled?>>

_(ZFS dataset to backup)_:
: <select name="SourceDataset" class="align" <?=$disabled?>>
  <?=datasets($cfg["SourceDataset"])?>
  </select>

_(Backup child datasets)_:
: <select name="BackupRecursive" class="align" <?=$disabled?>>
    <?=mk_option($cfg['BackupRecursive'], "no", "_(No)_");?>
    <?=mk_option($cfg['BackupRecursive'], "yes", "_(Yes)_");?>
  </select>

:backup_child_datasets_plug:
    > Enable to recursively backup all child datasets under the chosen source dataset above.
:end

_(Cron schedule)_:
: <input type="text" name="BackupCron" class="align" value="<?=$cfg['BackupCron'];?>" <?=$disabled?>>

_(Destination parent dataset (must match buddy's setting in section below))_:
: <input type="text" name="SendDestinationDataset" class="align" value="<?=$cfg['SendDestinationDataset'];?>" <?=$disabled?>>

&nbsp;
: <input type="submit" name="#apply" value="<?=_('Apply')?>" <?=$disabled?>>
<input class="disable-on-unsaved" type="button" value="_(Send backup now)_" onclick="send_backup(this)" <?=$disabled?>>

</form>
